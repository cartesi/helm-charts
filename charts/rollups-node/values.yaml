# (c) Cartesi and individual authors (see AUTHORS)
# SPDX-License-Identifier: Apache-2.0 (see LICENSE)

## dapp deployment paramaters
##
dapp:
  # -- the complete image name, e.g. "cartesi/dapp:echo-python-0.8.0-server"
  # (REQUIRED)
  image:

## cartesi holds the configuration for the default containers images
##
global:
  image:
    # -- Global Docker image registry
    registry: docker.io
    # -- Global Docker Image tag
    tag: 1.3.0

## seviceAccount configuration to be used by the rollups-validator-node
##
serviceAccount:
  # -- defines whether a service account should be created
  create: false
  # -- defines the annotations to add to the service account
  annotations: {}
  # -- defines the name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- String to fully override name
fullnameOverride: ""
# -- String to partially override  name
nameOverride: ""

## image configuration to be used by the rollups-validator-node
##
image:
  # -- Pullpolicy for Docker Images
  pullPolicy: Always
  # -- Cartesi Rollups Validator Nodes pull secrets
  pullSecrets: []

## ingress defines whether an Ingress will be created for the dapp
## The default Ingress has a default path / that points to the endpoints.graphqlServer
## And an /inspect path that points to the endpoints.inspectServer
## The dapp.contractAddress is used a a hostname suffixed by the ingress.subDomain
## e.g.
## host: 0xabcde.local
##
ingress:
  # -- Specifies whether a Ingress should be created
  enabled: false
  # -- defines the IngressClass to be used
  # If not set, the default class will be used
  # https://kubernetes.io/docs/concepts/services-networking/ingress/#default-ingress-class
  ingressClassName:
  # -- Ingress Sub domain name
  subDomain: "local"
  ## ingress.addReleaseNameCNAME adds the helm release name to the ingress as an additional rules[].host: {}
  ## You should be careful to use a release name that's safe to use as a hostname
  ## e.g. "my-release-name"
  ## You shouldn't use "_" as a character in a hostname
  # -- dditional rules[].host
  addReleaseNameAsHost: false
  # -- defines the annotations for ingresses
  annotations: {}

## extraDeploy Extra objects to deploy (value evaluated as a template)
# -- Array of extra objects to deploy with the release
extraDeploy: []

validator:
  # -- Set the dispatcher docker image
  image:
    registry:
    repository: cartesi/rollups-node
    tag:
    digest:

  # -- Node labels for validator pods assignment
  nodeSelector: {}

  # -- Tolerations for validator pods assignment
  tolerations: []

  # -- Affinity for validator pods assignment
  affinity: {}

  # -- add additional init containers to the dispatcher pod(s)
  ## Example
  ##
  ## initContainers:
  ##   - name: do-something
  ##     image: busybox
  ##     command: ['do', 'something']
  ##
  initContainers: []

  # -- validator replicas pod's Security Context
  podSecurityContext:
    {}
    ## fsGroup: 2000

  # -- Annotations for Validator replicas pods
  podAnnotations: {}

  # -- Optionally specify extra list of additional volumes for the validator pod(s)
  extraVolumes: []

  # -- The RUST_LOG level can be set to trace, debug, info, warn, error, or off.
  logLevel: info

  healthCheck:
    # -- enable/disable health check for dispatcher
    enabled: true
    # -- define the health check port for dispatcher
    port: 10000

  # -- Override default container command (useful when using custom images)
  command: ["cartesi-rollups-node"]

  # -- Override default container args (useful when using custom images)
  args: []

  # -- Extra arguments for dispatcher
  extraArgs: []

  # -- Array with extra environment variables to add to validator.validator Pod
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []

  # -- Name of existing ConfigMap containing extra env vars for validator Pod
  ##
  extraEnvVarsCM: ""

  # -- Name of existing Secret containing extra env vars for validator Pod
  ##
  extraEnvVarsSecret: ""

  service:
    # -- validator service type
    type: ClusterIP

  # -- Set validator Pod Security Context
  securityContext:
    {}
    ## capabilities:
    ##   drop:
    ##   - ALL
    ## readOnlyRootFilesystem: true
    ## runAsNonRoot: true
    ## runAsUser: 1000

  # -- Set validator Pod resources
  resources:
    {}
    ## limits:
    ##   cpu: 100m
    ##   memory: 128Mi
    ## requests:
    ##   cpu: 100m
    ##   memory: 128Mi

  # -- Optionally specify extra list of additional volumeMounts for the validator Pod(s)
  extraVolumeMounts: []
  config:
    CARTESI_LOG_LEVEL: info
    # -- If set to true, the node will print the timestamp when logging.
    CARTESI_LOG_TIMESTAMP: "false"
    # -- If set to true, the node will run in host mode.
    # In host mode, computations will not be performed by the cartesi machine.
    # You should only use host mode for development and debugging!
    CARTESI_FEATURE_HOST_MODE: "false"
    # -- If set to true, the node will run in reader mode.
    # In reader mode, the node does not make claims.
    CARTESI_FEATURE_READER_MODE: "false"
    # -- If set to true, the node will *not* check whether the Cartesi machine hash from
    # the snapshot matches the hash in the Application contract.
    CARTESI_FEATURE_DISABLE_MACHINE_HASH_CHECK: "false"
    # -- Duration of a rollups epoch in seconds.
    # At the end of each epoch, the node will send claims to the blockchain.
    CARTESI_EPOCH_DURATION: "86400"
    # -- An unique identifier representing a blockchain network.
    CARTESI_BLOCKCHAIN_ID: ""
    # -- HTTP endpoint for the blockchain RPC provider.
    CARTESI_BLOCKCHAIN_HTTP_ENDPOINT: ""
    # -- WebSocket endpoint for the blockchain RPC provider.
    CARTESI_BLOCKCHAIN_WS_ENDPOINT: ""
    # -- If set to true the node will send transactions using the legacy gas fee model
    # (instead of EIP-1559).
    CARTESI_BLOCKCHAIN_IS_LEGACY: "false"
    # -- The node assumes that blocks offseted by N from the current block have reached finality
    # (N is the read depth).
    CARTESI_BLOCKCHAIN_FINALITY_OFFSET: "10"
    # -- Block subscription timeout in seconds.
    CARTESI_BLOCKCHAIN_BLOCK_TIMEOUT: "60"
    # -- The deployment block for the input box contract.
    # The node will begin to read blockchain events from this block.
    CARTESI_CONTRACTS_INPUT_BOX_DEPLOYMENT_BLOCK_NUMBER: ""
    # -- Address of the DApp's contract.
    CARTESI_CONTRACTS_DAPP_ADDRESS: ""
    # -- Block in which the DApp's contract was deployed.
    CARTESI_CONTRACTS_DAPP_DEPLOYMENT_BLOCK_NUMBER: ""
    # -- Address of the History contract.
    CARTESI_CONTRACTS_HISTORY_ADDRESS: ""
    # -- Address of the Authority contract.
    CARTESI_CONTRACTS_AUTHORITY_ADDRESS: ""
    # -- Address of the InputBox contract.
    CARTESI_CONTRACTS_INPUT_BOX_ADDRESS: ""
    # -- Path to the directory with the cartesi-machine snapshot that will be loaded by the node.
    CARTESI_SNAPSHOT_DIR: ""
    # -- The node will use the private key generated from this mnemonic to sign transactions.
    # Overrides `CARTESI_AUTH_MNEMONIC_FILE` and `CARTESI_AUTH_AWS_KMS_*`.
    CARTESI_AUTH_MNEMONIC: ""
    # -- The node will use the private key generated from the mnemonic contained in this file
    # to sign transactions.
    # Overrides `CARTESI_AUTH_AWS_KMS_*`.
    CARTESI_AUTH_MNEMONIC_FILE: ""
    # -- When using mnemonics to sign transactions,
    # the node will use this account index to generate the private key.
    CARTESI_AUTH_MNEMONIC_ACCOUNT_INDEX: "0"
    # -- If set, the node will use the AWS KMS service with this key ID to sign transactions.
    # Must be set alongside `CARTESI_AUTH_AWS_KMS_REGION`.
    CARTESI_AUTH_AWS_KMS_KEY_ID: ""
    # -- An AWS KMS Region.
    # Must be set alongside `CARTESI_AUTH_AWS_KMS_KEY_ID`.
    CARTESI_AUTH_AWS_KMS_REGION: ""
    # -- Postgres endpoint in the 'postgres://user:password@hostname:port/database' format.
    # If not set, or set to empty string, will defer the behaviour to the PG driver.
    # See [this](https://www.postgresql.org/docs/current/libpq-envars.html) for more information.
    # It is also possible to set the endpoint without a password and load it from Postgres' passfile.
    # See [this](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-PASSFILE)
    # for more information.
    CARTESI_POSTGRES_ENDPOINT: ""
    # -- HTTP address for the node.
    CARTESI_HTTP_ADDRESS: 127.0.0.1
    # -- HTTP port for the node.
    # The node will also use the 20 ports after this one for internal services.
    CARTESI_HTTP_PORT: "10000"
    # -- When enabled, the node does not start the authority-claimer service and the Redis server.
    CARTESI_EXPERIMENTAL_SUNODO_VALIDATOR_ENABLED: "false"
    # -- External Redis endpoint for the node when running in the experimental sunodo validator mode.
    CARTESI_EXPERIMENTAL_SUNODO_VALIDATOR_REDIS_ENDPOINT: ""
