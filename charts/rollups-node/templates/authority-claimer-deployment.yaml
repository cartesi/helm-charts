{{- /*
(c) Cartesi and individual authors (see AUTHORS)
SPDX-License-Identifier: Apache-2.0 (see LICENSE)
*/}}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "validator.fullname" . }}-authority-claimer
  labels: {{- include "validator.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "validator.selectorLabels" . | nindent 6 }}
      rollups.cartesi.io/component: authority-claimer
  template:
    metadata:
      {{- with .Values.authorityClaimer.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "validator.selectorLabels" . | nindent 8 }}
        rollups.cartesi.io/component: authority-claimer
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "validator.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.authorityClaimer.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.authorityClaimer.initContainers }}
        {{- include "tplvalues.render" ( dict "value" .Values.authorityClaimer.initContainers "context" $ ) | nindent 8 }}
        {{- end }}
      containers:
        - name: rollups-authority-claimer
          image: {{ include "authorityClaimer.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.authorityClaimer.resources | nindent 12 }}
          {{- if .Values.authorityClaimer.command }}
          command:
          {{- include "tplvalues.render" (dict "value" .Values.authorityClaimer.command "context" $) | nindent 12 }}
          {{- end }}
          args:
            {{- if .Values.authorityClaimer.healthCheck.enabled }}
            - {{ print "--http-server-port=" (default .Values.authorityClaimer.healthCheck.port 8086) | quote }}
            {{- end }}
            - {{ print "--dapp-address=" (required "A valid .Values.dapp.contractAddress is required" .Values.dapp.contractAddress) | quote }}
            - {{ print "--dapp-deploy-block-hash=" (required "A valid .Values.dapp.blockHash is required" .Values.dapp.blockHash) | quote }}
            {{- if (or .Values.dapp.mnemonic.value .Values.dapp.mnemonic.secretRef) }}
            - {{ print "--tx-signing-mnemonic-file=/var/run/secrets/mnemonic/MNEMONIC" | quote }}
            {{- end }}
            - {{ print "--tx-provider-http-endpoint=" (required "A valid .Values.dapp.httpProvider is required" .Values.dapp.httpProvider) | quote }}
            {{- if (or .Values.dapp.network) }}
            - {{ print "--tx-chain-id=" (include "dapp.chainID" .) | quote }}
            {{- end }}
            - {{ print (include "validator.redisConfig" .) | quote }}
            {{- range .Values.authorityClaimer.args }}
            - {{ . | quote}}
            {{- end }}
            {{- range .Values.authorityClaimer.extraArgs }}
            - {{ . | quote}}
            {{- end }}
          {{- if .Values.authorityClaimer.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ (default 8086 .Values.authorityClaimer.healthCheck.port) }}
            initialDelaySeconds: 3
          {{- end }}
          env:
            - name: RUST_LOG
              value: {{ .Values.authorityClaimer.logLevel }}
            {{- if .Values.authorityClaimer.extraEnvVars }}
            {{- include "tplvalues.render" (dict "value" .Values.authorityClaimer.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          {{- if or .Values.authorityClaimer.extraEnvVarsCM .Values.authorityClaimer.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.authorityClaimer.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "tplvalues.render" ( dict "value" .Values.authorityClaimer.extraEnvVarsCM "context" $ ) }}
            {{- end }}
            {{- if .Values.authorityClaimer.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "tplvalues.render" ( dict "value" .Values.authorityClaimer.extraEnvVarsSecret "context" $ ) }}
            {{- end }}
          {{- end }}
          volumeMounts:
            {{- if (or .Values.dapp.mnemonic.value .Values.dapp.mnemonic.secretRef) }}
            - name: mnemonic
              mountPath: /var/run/secrets/mnemonic
              readOnly: true
            {{- end }}
            - name: authority-claimer-lib
              mountPath: /opt/cartesi/rollups-authority-claimer/lib
              readOnly: false
            {{- if .Values.authorityClaimer.extraVolumeMounts }}
            {{- include "tplvalues.render" ( dict "value" .Values.authorityClaimer.extraVolumeMounts "context" $ ) | nindent 12 }}
            {{- end }}

      volumes:
        - name: authority-claimer-lib
          emptyDir: {}
        {{- if (or .Values.dapp.mnemonic.value .Values.dapp.mnemonic.secretRef) }}
        - name: mnemonic
          secret:
            {{- if .Values.dapp.mnemonic.value }}
            secretName: {{ include "validator.fullname" . }}-mnemonic
            {{- else }}
            secretName: {{ .Values.dapp.mnemonic.secretRef }}
            {{- end }}
        {{- end }}
        {{- if .Values.authorityClaimer.extraVolumes }}
        {{- include "tplvalues.render" ( dict "value" .Values.authorityClaimer.extraVolumes "context" $ ) | nindent 8 }}
        {{- end }}
      {{- with .Values.authorityClaimer.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.authorityClaimer.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.authorityClaimer.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
